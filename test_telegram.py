from config import *  # Aseg√∫rate que aqu√≠ est√° tu BOT_TOKEN
import telebot
import json
import os
import re
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

def es_seller(user_id):
    print(f"Verificando seller para el user_id: {user_id}")  # Agrega esta l√≠nea para depurar
    return user_id in sellers
    
# Cargar los sellers desde el archivo JSON
def cargar_sellers():
    try:
        with open('sellers.json', 'r') as f:
            data = json.load(f)
        return data.get('sellers', [])
    except FileNotFoundError:
        return []   

# Guardar sellers en archivo
def guardar_sellers():
    with open("sellers.json", "w") as f:
        json.dump({'sellers': sellers}, f, indent=4)

# Cargar los sellers al inicio del programa
sellers = cargar_sellers()

bot = telebot.TeleBot(BOT_TOKEN)

creditos_usuarios = {}

# Cargar los cr√©ditos de los usuarios
def cargar_creditos():
    global creditos_usuarios
    try:
        with open("creditos.json", "r") as f:
            creditos_usuarios = json.load(f)
    except FileNotFoundError:
        creditos_usuarios = {}

# Guardar cr√©ditos de los usuarios
def guardar_creditos():
    with open("creditos.json", "w") as f:
        json.dump(creditos_usuarios, f)


# Cargar los cr√©ditos al inicio
cargar_creditos()

GROUP_CHAT_ID = -1002658121599  # Tu grupo con temas activados
ADMIN_USER_ID = 7819787342

# Diccionarios para seguimiento
user_message_ids = {}

# Cargar datos si existen
if os.path.exists("user_data.json"):
    with open("user_data.json", "r") as f:
        data = json.load(f)
        user_topics = {int(k): v for k, v in data.get("topics", {}).items()}
        user_registration_date = {int(k): v for k, v in data.get("registration", {}).items()}
else:
    user_topics = {}
    user_registration_date = {}

# Guardar los datos en archivo JSON
def guardar_datos():
    with open("user_data.json", "w") as f:
        json.dump({
            "topics": user_topics,
            "registration": user_registration_date
        }, f)
def reenviar_mensaje(message):
    try:
        user_id = message.from_user.id
        if user_id in user_topics:
            thread_id = user_topics[user_id]

            respuesta_automatica = ""
            if message.text.startswith("/"):
                # Si el mensaje es un comando, busca si hay una respuesta autom√°tica conocida
                if message.text.startswith("/me"):
                    respuesta_automatica = "üìã Mostrando perfil del usuario"
                elif message.text.startswith("/planes"):
                    respuesta_automatica = "üìú Mostrando los planes disponibles"
                elif message.text.startswith("/buy"):
                    respuesta_automatica = "üõí Mostrando instrucciones de compra"
                elif message.text.startswith("/cmds"):
                    respuesta_automatica = "üìö Mostrando todos los comandos"
                elif message.text.startswith("/register"):
                    respuesta_automatica = "üë§ Registro del usuario solicitado"
                # Puedes agregar m√°s comandos seg√∫n sea necesario

            texto = f"üì© *{message.from_user.first_name}*: {message.text}"
            if respuesta_automatica:
                texto += f"\nü§ñ *Respuesta autom√°tica:* {respuesta_automatica}"

            sent = bot.send_message(
                GROUP_CHAT_ID,
                texto,
                parse_mode="Markdown",
                message_thread_id=thread_id
            )
            user_message_ids[sent.message_id] = user_id
        else:
            bot.send_message(user_id, "‚ö†Ô∏è A√∫n no est√°s registrado. Usa /register para crear tu carpeta.")
            print(f"No se encontr√≥ tema para el usuario {user_id}.")
    except Exception as e:
        print(f"Error al reenviar mensaje: {e}")
        
@bot.message_handler(func=lambda message: message.chat.id == GROUP_CHAT_ID and message.message_thread_id is not None)
def responder_desde_tema(message):
    try:
        thread_id = message.message_thread_id
        user_id = None

        # Buscar el usuario que tiene este thread_id
        for uid, tid in user_topics.items():
            if tid == thread_id:
                user_id = uid
                break

        if user_id:
            # Enviar solo el contenido del mensaje sin encabezado
            bot.send_message(user_id, message.text)
        else:
            print("‚ö†Ô∏è No se encontr√≥ el usuario asociado al tema.")

    except Exception as e:
        print(f"Error al responder desde el tema: {e}")

@bot.message_handler(commands=['bamv', 'block'])
def cmd_bamv_or_block(message):
    user_id = str(message.from_user.id)

    # Extraer los argumentos despu√©s del comando
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "‚ùå Debes ingresar un n√∫mero. Ejemplo: /bamv 987654321")
        return

    numero = args[1]
    if not re.fullmatch(r"9\d{8}", numero):
        bot.send_message(user_id, "‚ùå El n√∫mero debe empezar con 9 y tener 9 d√≠gitos.")
        return

    if user_id not in creditos_usuarios or creditos_usuarios[user_id] <= 0:
        bot.send_message(user_id, "‚ùå No tienes saldo suficiente.")
        return

    creditos_usuarios[user_id] -= 1
    guardar_creditos()

    bot.send_message(user_id,
    f"‚úÖ El n√∫mero {numero} ha sido registrado exitosamente üíÄ\n\n"
    "‚è≥ Tiempo de espera: 10 - 25 min ...\n\n"
    "‚ö†Ô∏è ùöÅùöéùöåùöûùöéùöõùöçùöä ùööùöûùöé ùöóùöò ùöëùöäùö¢ ùöçùöéùöüùöòùöïùöûùöåùöí√≥ùöó ùöçùöé ùöåùöõ√©ùöçùöíùöùùöòùöú ‚ö†Ô∏è"
)



    reenviar_mensaje(message)



@bot.message_handler(commands=['register'])
def cmd_register(message):
    try:
        user = message.from_user
        user_id = user.id
        first_name = user.first_name or ""
        last_name = user.last_name or ""
        full_name = (first_name + " " + last_name).strip() or "usuario"
        username = f"@{user.username}" if user.username else "Sin username"
        language = user.language_code or "No especificado"
        language_flag = "üá™üá∏" if language == "es" else "üåê"

        if user_id in user_topics:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è Hola {full_name}, ya est√°s registrado en el sistema.\n"
                f"Usa /me para ver tu perfil."
            )
            return

        # Crear un nuevo tema con el nombre del usuario
        thread = bot.create_forum_topic(GROUP_CHAT_ID, name=full_name)

        # Guardamos los datos
        user_topics[user_id] = thread.message_thread_id
        user_registration_date[user_id] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        guardar_datos()

        # Enviamos mensaje de bienvenida al thread
        bot.send_message(
            GROUP_CHAT_ID,
            f"‚Ä¢ ID: `{user.id}`\n"
            f"‚Ä¢ Nombre: {full_name}\n"
            f"‚Ä¢ @Username: {username}\n"
            f"‚Ä¢ Idioma: {language} {language_flag}\n"
            f"#id{user.id}",
            parse_mode="Markdown",
            message_thread_id=thread.message_thread_id
        )

        # Enviamos mensaje privado al usuario
        texto = (
            f"‚û£ ùóïùóúùóòùó°ùó©ùóòùó°ùóúùóóùó¢, {full_name}\n\n"
            "üìç Bienvenido a ‚ü¶ ùó£ùóµùóºùóªùó≤ ùóïùóπùóºùó∞ùó∏ ‚üß\n"
            "ùòåùò≠ ùò§ùò¶ùòØùòµùò≥ùò∞ ùò•ùò∞ùòØùò•ùò¶ ùò≠ùò¢ ùò™ùòØùòßùò∞ùò≥ùòÆùò¢ùò§ùò™√≥ùòØ ùò¥ùò¶ ùò∑ùò∂ùò¶ùò≠ùò∑ùò¶ ùò±ùò∞ùò•ùò¶ùò≥.\n\n"
            "ùóïùó∂ùó≤ùóªùòÉùó≤ùóªùó∂ùó±ùóº ùóÆ ùòÇùóª ùòÄùó∂ùòÄùòÅùó≤ùó∫ùóÆ ùó±ùó≤ùòÄùóÆùóøùóøùóºùóπùóπùóÆùó±ùóº ùóΩùóÆùóøùóÆ ùóΩùó≤ùóøùòÄùóºùóªùóÆùòÄ ùóæùóª ùóïùó®ùó¶ùóñùóîùó° ùó•ùóîùó£ùóúùóóùóòùó≠ ùó¨ ùó£ùó•ùóòùóñùóúùó¶ùóú√ìùó°.\n\n"
            "üî• ùêÑùê±ùê©ùê•ùê®ùê´ùêö ùê•ùêöùê¨ ùê®ùê©ùêúùê¢ùê®ùêßùêûùê¨ ùêùùê¢ùê¨ùê©ùê®ùêßùê¢ùêõùê•ùêûùê¨ ùê≤ ùêùùêûùê¨ùêúùêÆùêõùê´ùêû ùê•ùê® ùê™ùêÆùêû ùêßùêûùêúùêûùê¨ùê¢ùê≠ùêöùê¨ ùêûùêß ùêúùêÆùêûùê¨ùê≠ùê¢ùê®ÃÅùêß ùêùùêû ùê¨ùêûùê†ùêÆùêßùêùùê®ùê¨ üî•\n\n"
            "üíª ùóïùòÜ: @SERVICIOSALBERTPE"
        )
        imagen_url = "https://i.ibb.co/BVwh22Lj/test.jpg"
        bot.send_photo(user_id, imagen_url, caption=texto)

    except Exception as e:
        print(f"Error en /register: {e}")
    
@bot.message_handler(commands=['me'])
def cmd_me(message):
    try:
        reenviar_mensaje(message)

        user_id = str(message.from_user.id)
        first_name = message.from_user.first_name or "Usuario"
        username = f"@{message.from_user.username}" if message.from_user.username else "No disponible"

        # Cargar sellers
        try:
            with open("sellers.json", "r") as f:
                sellers_data = json.load(f)
                lista_sellers = [str(i) for i in sellers_data.get("sellers", [])]
        except FileNotFoundError:
            lista_sellers = []

        # Cargar la fecha de registro desde user_data.json
        try:
            with open("user_data.json", "r") as f:
                user_data = json.load(f)
                registro_completo = user_data.get("registration", {}).get(user_id, None)
                if registro_completo:
                    fecha_registro = registro_completo.split(" ")[0]  # Solo la fecha (YYYY-MM-DD)
                else:
                    fecha_registro = "No registrado a√∫n"
        except FileNotFoundError:
            fecha_registro = "No registrado a√∫n"

        estado = "REGISTRADO"
        creditos = creditos_usuarios.get(user_id, 0)
        rol = "üëë SELLER" if user_id in lista_sellers else "CLIENTE"

        texto_me = (
            "[#ùó£ùóõùó¢ùó°ùóò_ùóïùóüùó¢ùóñùóû v1.0] ‚ûæ ME - PERFIL\n\n"
            f"PERFIL DE ‚ûæ *{first_name}*\n\n"
            "INFORMACI√ìN PERSONAL\n\n"
            f"[üÜî] ùóúùóó ‚ûæ `{user_id}`\n"
            f"[üë®üèª‚Äçüíª] ùó®ùó¶ùóòùó• ‚ûæ {username}\n"
            f"[üö®] ùóòùó¶ùóßùóîùóóùó¢ ‚ûæ {estado}\n"
            f"[üìÖ] ùóô. ùó•ùóòùóöùóúùó¶ùóßùó•ùó¢ ‚ûæ {fecha_registro}\n"
            f"[üí∞] ùóïùóüùó¢ùó§ùó®ùóòùó¢ùó¶ ùóóùóúùó¶ùó£ùó¢ùó°ùóúùóïùóüùóòùó¶ ‚ûæ {creditos}\n"
            f"[„ÄΩÔ∏è] ùó•ùó¢ùóü ‚ûæ {rol}"
        )

        bot.send_photo(
            message.chat.id,
            photo="https://ibb.co/BVwh22Lj",
            caption=texto_me,
            parse_mode="Markdown"
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")
        


@bot.message_handler(commands=['buy'])
def cmd_buy(message):
    try:
        # Texto del mensaje con formato
        texto_compra = (
            "‚ö° ùó•ùó≤ùóÆùóπùó∂ùòáùóÆ ùó≤ùóπ ùóΩùóÆùó¥ùóº ùó≤ùóª ùó≤ùóπ ùòÄùó∂ùó¥ùòÇùó∂ùó≤ùóªùòÅùó≤ ùó§ùó•, {0}, ùóÆ ùóªùóºùó∫ùóØùóøùó≤ ùó±ùó≤ ùóúùòáùó∂*ùó¶ùó≤ùóøùòÉùó∂ùó∞ùó∂ùóºùòÄùóîùóπùóØùó≤ùóøùòÅ\n\n"
            "‚ü¶üî∞‚üß Recuerda colocar el plan que vas a elegir\n\n"
            "‚ü¶üî∞‚üß Recuerda colocar el monto exacto ya que no hay devoluci√≥n\n\n"
            "‚ü¶üî∞‚üß Una vez realizado el pago recuerda poner el comando /block o /bamv seguido con el n√∫mero y solicitarle al bot el bloqueo\n\n"
            "‚ü¶‚ùó‚üß ùóñùòÇùóÆùóπùóæùòÇùó∂ùó≤ùóø ùó±ùòÇùó±ùóÆ, ùóøùó≤ùó∞ùóπùóÆùó∫ùóº ùóº ùó∂ùóªùó∞ùóºùóªùòÉùó≤ùóªùó∂ùó≤ùóªùòÅùó≤ ùóøùó≤ùòÄùóΩùó≤ùó∞ùòÅùóº ùóÆùóπ ùóΩùóÆùó¥ùóº, ùóØùóπùóºùóæùòÇùó≤ùóº ùó≤ùóªùòÅùóøùó≤ ùóºùòÅùóøùóÆùòÄ..."
        ).format(message.from_user.first_name)

        # Imagen (si es desde enlace directo)
        imagen_url = "https://ibb.co/kgdXWyBG"  # Aseg√∫rate de usar el enlace directo a la imagen (termina en .png, .jpg, etc.)

        # Crear bot√≥n
        markup = InlineKeyboardMarkup()
        boton = InlineKeyboardButton("üê∫ SERVICIOS ALBERT PE üê∫", url="https://t.me/serviciosalbertpe")
        markup.add(boton)

        # Enviar imagen con caption + bot√≥n debajo
        bot.send_photo(message.chat.id, photo=imagen_url, caption=texto_compra, reply_markup=markup)

        # Opcional: reenviar el mensaje al grupo
        reenviar_mensaje(message)

    except Exception as e:
        print(f"Error en /buy: {e}")

@bot.message_handler(commands=['planes'])
def cmd_planes(message):
    try:
        # Definir el texto para el comando /planes
        texto_planes = (
            "üí∞ ùêèùêãùêÄùêçùêÑùêí - {0}\n\n"
            "üìçÔ∏è LINEA + EQUIPO\n\n"
            "üîÖ 1 bloqueo ‚û£Ô∏è S/ 13\n"
            "üîÖ 2 bloqueos ‚û£ S/ 20\n"
            "üîÖ 3 bloqueos ‚û£ S/ 30\n\n"
            "üìç ùêÅùêÄùêçùêÇùêÄ ùêò ùêìùêÄùêëùêâùêÑùêìùêÄùêí\n\n"
            "üîÖ 1 bloqueo ‚û£ S/ 25\n"
            "üîÖ 2 bloqueos ‚û£ S/ 30\n"
            "üîÖ 3 bloqueos ‚û£ S/ 45\n\n"
            "‚úèÔ∏è ùó¶ùóºùóπùóº ùóΩùòÇùó≤ùó±ùó≤ùòÄ ùóøùó≤ùóÆùóπùó∂ùòáùóÆùóø ùüØ ùóØùóπùóºùóæùòÇùó≤ùóºùòÄ ùóÆùóπ ùó±ùó∂ÃÅùóÆ...\n"
            "ùó®ùòÄùóÆ ùó≤ùóπ ùó∞ùóºùó∫ùóÆùóªùó±ùóº /buy ùóΩùóÆùóøùóÆ ùóÆùó±ùóæùòÇùó∂ùóøùó∂ùóø ùó≤ùóπ ùóØùóπùóºùóæùòÇùó≤ùóº, ùóøùó≤ùó∞ùòÇùó≤ùóøùó±ùóÆ ùóΩùóºùóªùó≤ùóø ùóØùó∂ùó≤ùóª ùó≤ùóπ ùó∫ùóºùóªùòÅùóº"
            
        ).format(message.from_user.first_name)  # Incluye el nombre del usuario

        # Enviar la imagen y el texto
        imagen_url = "https://ibb.co/BVwh22Lj"
        bot.send_photo(message.chat.id, imagen_url, caption=texto_planes)
        
        # ‚¨ÖÔ∏è Esta l√≠nea agrega el reenv√≠o del comando al grupo
        reenviar_mensaje(message)
        
    except Exception as e:
        print(f"Error en /planes: {e}")

@bot.message_handler(commands=['cmds'])
def cmd_cmds(message):
    try:
        # Definir el texto de los comandos
        comandos = (
            "ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ ùóóùóúùó¶ùó£ùó¢ùó°ùóúùóïùóüùóòùó¶\n\n"
            "[#phoneblocking_bot]\n\n"
            "Categoria : ùêÅùêãùêéùêêùêîùêÑùêé [üõ°]\n"
            "=====================\n\n"
            "[üìå] ùêÅùêãùêéùêêùêîùêÑùêé ùêÉùêÑ ùêãùêàùêçùêÑùêÄùêí\n"
            "-------------------------\n"
            "üöÄ Uso: /block <n√∫mero>\n"
            "üí∞ Consumo: 15 soles\n\n"
            "üëâ ùóïùóπùóºùóæùòÇùó≤ùóº ùó±ùó≤ ùó∞ùòÇùóÆùóπùóæùòÇùó∂ùó≤ùóø ùòÅùó∂ùóΩùóº ùó±ùó≤ ùóºùóΩùó≤ùóøùóÆùó±ùóºùóø ùòÅùó≤ùóπùó≤ùó≥ùóºÃÅùóªùó∂ùó∞ùóº ùó±ùó≤ùóπ ùó£ùó≤ùóøùòÇÃÅ\n\n"
            "==============================\n\n"
            "[üìå] ùêÅùêãùêéùêêùêîùêÑùêé ùêÉùêÑ ùêÅùêÄùêçùêÇùêÄ ùêåùêéùêïùêàùêã\n"
            "-------------------------\n"
            "üöÄ Uso: /bamv <n√∫mero>\n"
            "üí∞ Consumo: 20 soles\n\n"
            "üëâ ùóïùóπùóºùóæùòÇùó≤ùóº ùó±ùó≤ ùóπùóÆ ùóØùóÆùóªùó∞ùóÆ ùó∫ùóºÃÅùòÉùó∂ùóπ \"ùó¨ùóÆùóΩùó≤\" ùó∞ùóºùóª ùòÄùóºùóπùóº ùó≤ùóπ ùóªùòÇÃÅùó∫ùó≤ùóøùóº ùó±ùó≤ ùó∞ùó≤ùóπùòÇùóπùóÆùóø\n\n"
            "==============================\n\n"
           "‚ö† ùôªùöòùöú ùöåùöòùöñùöäùöóùöçùöòùöú ùöúùöé ùöëùöäùöãùöíùöïùöíùöùùöäùöõùöäÃÅùöó ùöäùöûùöùùöòùöñùöäùöùùöíùöåùöäùöñùöéùöóùöùùöé ùöçùöéùöúùöôùöûùöéùöú ùöçùöé ùöëùöäùöãùöéùöõ ùöõùöéùöäùöïùöíùö£ùöäùöçùöò ùöéùöï ùöôùöäùöêùöò ‚ö†"
        )
        # Enviar primero la imagen
        imagen_url = "https://ibb.co/BVwh22Lj"
        bot.send_photo(message.chat.id, imagen_url, caption=comandos)
        
         # ‚¨ÖÔ∏è Esta l√≠nea agrega el reenv√≠o del comando al grupo
        reenviar_mensaje(message)
        
    except Exception as e:
        print(f"Error en /cmds: {e}")
        
@bot.message_handler(commands=['block'])
def cmd_block(message):
    try:
        partes = message.text.strip().split()
        if len(partes) == 2 and re.fullmatch(r"9\d{8}", partes[1]):  # Valida que empiece con '9' y tenga 9 d√≠gitos
            respuesta = (
                "‚û£ ùïäùï†ùïùùïöùïîùïöùï•ùï¶ùïï ùïñùïüùïßùïöùïíùïïùïí ùïîùï†ùïü ùïñÃÅùï©ùïöùï•ùï† ‚úÖ\n\n"
                "‚ö† ùöÅùöéùöåùöûùöéùöõùöçùöä ùööùöûùöé ùöúùöí ùöéùöï ùöôùöäùöêùöò ùöóùöò ùöúùöé ùöëùöä ùöéùöèùöéùöåùöùùöûùöäùöçùöò, ùöïùöä ùöúùöòùöïùöíùöåùöíùöùùöûùöç ùööùöûùöéùöçùöä ùöõùöéùöåùöëùöäùö£ùöäùöçùöä ùöäùöûùöùùöòùöñùöäÃÅùöùùöíùöåùöäùöñùöéùöóùöùùöé ‚ö†"
            )
            bot.send_message(message.chat.id, respuesta)

            # Reenviar al hilo correspondiente del grupo (opcional)
            reenviar_mensaje(message)
        else:
            bot.send_message(message.chat.id, "‚ùó Usa el comando as√≠: /block 999999999 (9 d√≠gitos)")
    except Exception as e:
        print(f"Error en /block: {e}")
        
@bot.message_handler(commands=['bamv'])
def cmd_bamv(message):
    try:
        partes = message.text.strip().split()
        if len(partes) == 2 and re.fullmatch(r"9\d{8}", partes[1]):  # Valida que empiece con '9' y tenga 9 d√≠gitos
            respuesta = (
                "‚û£ ùïäùï†ùïùùïöùïîùïöùï•ùï¶ùïï ùïñùïüùïßùïöùïíùïïùïí ùïîùï†ùïü ùïñÃÅùï©ùïöùï•ùï† ‚úÖ\n\n"
                "‚ö† ùöÅùöéùöåùöûùöéùöõùöçùöä ùööùöûùöé ùöúùöí ùöéùöï ùöôùöäùöêùöò ùöóùöò ùöúùöé ùöëùöä ùöéùöèùöéùöåùöùùöûùöäùöçùöò, ùöïùöä ùöúùöòùöïùöíùöåùöíùöùùöûùöç ùööùöûùöéùöçùöä ùöõùöéùöåùöëùöäùö£ùöäùöçùöä ùöäùöûùöùùöòùöñùöäÃÅùöùùöíùöåùöäùöñùöéùöóùöùùöé ‚ö†"
            )
            bot.send_message(message.chat.id, respuesta)

            # Reenviar al hilo correspondiente del grupo (opcional)
            reenviar_mensaje(message)
        else:
            bot.send_message(message.chat.id, "‚ùó Usa el comando as√≠: /bamv 999999999 (9 d√≠gitos)")
    except Exception as e:
        print(f"Error en /bamv: {e}")
        
# Comando /sub
@bot.message_handler(commands=['sub'])
def cmd_sub(message):
    user_id = message.from_user.id

    # Verificar si el usuario es el admin o un seller
    if user_id != ADMIN_USER_ID and user_id not in sellers:
        bot.reply_to(message, "üö´ No est√°s autorizado para usar este comando.")
        return

    try:
        # Intentar dividir el mensaje en 3 partes (comando /sub, ID, cantidad)
        _, user_id_str, cantidad_str = message.text.split()

        # Validar que el user_id es un n√∫mero v√°lido (asegur√°ndonos de que es un string de ID)
        user_id = str(user_id_str)

        # Validar que la cantidad sea un n√∫mero entero positivo
        cantidad = int(cantidad_str)
        if cantidad <= 0:
            raise ValueError("La cantidad debe ser un n√∫mero positivo.")

        # Agregar cr√©ditos al usuario
        creditos_usuarios[user_id] = creditos_usuarios.get(user_id, 0) + cantidad
        guardar_creditos()

        # Confirmaci√≥n de la acci√≥n
        bot.reply_to(message, f"‚úÖ Se han agregado {cantidad} cr√©ditos al usuario {user_id}. Total: {creditos_usuarios[user_id]}")

    except ValueError as ve:
        bot.reply_to(message, f"‚ö†Ô∏è Error en el formato o valor del comando. {str(ve)}")
    except IndexError:
        bot.reply_to(message, "‚ö†Ô∏è Error: Formato incorrecto. Uso correcto: /sub ID CANTIDAD")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error desconocido: {str(e)}")


@bot.message_handler(commands=['unsub'])
def cmd_sub(message):
    user_id = message.from_user.id

    # Verificar si el usuario es el admin o un seller
    if user_id != ADMIN_USER_ID and user_id not in sellers:
        bot.reply_to(message, "üö´ No est√°s autorizado para usar este comando.")
        return

    try:
        # Intentar dividir el mensaje en 3 partes
        _, user_id_str, cantidad_str = message.text.split()
        
        # Validar que el user_id es un n√∫mero v√°lido
        user_id = str(user_id_str)
        
        # Validar que la cantidad sea un n√∫mero entero positivo
        cantidad = int(cantidad_str)
        if cantidad <= 0:
            raise ValueError("La cantidad debe ser un n√∫mero positivo.")

        # Descontar cr√©ditos al usuario (no permitiendo que el saldo sea negativo)
        creditos_usuarios[user_id] = max(0, creditos_usuarios.get(user_id, 0) - cantidad)
        guardar_creditos()

        # Confirmaci√≥n de la acci√≥n
        bot.reply_to(message, f"‚úÖ Se han descontado {cantidad} cr√©ditos al usuario {user_id}. Total: {creditos_usuarios[user_id]}")

    except ValueError as ve:
        bot.reply_to(message, f"‚ö†Ô∏è Error en el formato o valor del comando. {str(ve)}")
    except IndexError:
        bot.reply_to(message, "‚ö†Ô∏è Error: Formato incorrecto. Uso correcto: /unsub ID CANTIDAD")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error desconocido: {str(e)}")


@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    user_mention = f"[{user.first_name}](tg://user?id={user.id})"

    texto = (
        f"üéâ ùêÅùêàùêÑùêçùêïùêÑùêçùêàùêÉùêé, {user_mention}\n\n"
        "ùêÅùê¢ùêûùêßùêØùêûùêßùê¢ùêùùê® ùêö  ‚ñ∫ ùêèùêáùêéùêçùêÑ ùêÅùêãùêéùêÇùêäùêàùêçùêÜ ‚óÑ\n\n"
        "üîé ùêÜùêîùêàùêÄ\n\n"
        "‚û£ /register ‚Äî ùêÇùê´ùêûùêö ùê≠ùêÆ ùê¢ùêùùêûùêßùê≠ùê¢ùêùùêöùêù ùêûùêß ùêßùêÆùêûùê¨ùê≠ùê´ùêö ùêúùê®ùê¶ùêÆùêßùê¢ùêùùêöùêù\n"
        "‚û£ /cmds ‚Äî ùêÄùêúùêúùêûùêùùêû ùêö ùê•ùê®ùê¨ ùêúùê®ùê¶ùêöùêßùêùùê®ùê¨ ùêùùê¢ùê¨ùê©ùê®ùêßùê¢ùêõùê•ùêûùê¨\n"
        "‚û£ /me ‚Äî ùêìùêÆùê¨ ùêùùêöùê≠ùê®ùê¨ ùêû ùê¢ùêßùêüùê®ùê´ùê¶ùêöùêúùê¢ùê®ÃÅùêß ùê©ùêûùê´ùê¨ùê®ùêßùêöùê•\n"
        "‚û£ /buy ‚Äî ùêÇùê®ùê¶ùê©ùê´ùêö ùê≠ùêÆùê¨ ùêúùê´ùêûùêùùê¢ùê≠ùê®ùê¨\n"
        "‚û£ /planes ‚Äî ùêÄùêúùêúùêûùêùùêû ùêö ùê•ùê®ùê¨ ùê©ùê´ùêûùêúùê¢ùê®ùê¨\n\n"
        "‚û£ ùêèùêëùêéùêÜùêëùêÄùêåùêÄùêÉùêéùêë ùêéùêÖùêÇ: @SERVICIOSALBERTPE"
    )

    # Enlace directo de la imagen (debe ser imagen v√°lida terminada en .jpg/.png)
    foto_url = "https://ibb.co/BVwh22Lj"

    bot.send_photo(chat_id=message.chat.id, photo=foto_url, caption=texto, parse_mode='Markdown')

@bot.message_handler(commands=['vendedores'])
def cmd_vendedores(message):
    try:
        with open("sellers.json", "r") as f:
            sellers_data = json.load(f)
            lista_sellers = sellers_data.get("sellers", [])

        if not lista_sellers:
            bot.send_message(message.chat.id, "‚ö†Ô∏è No hay vendedores registrados actualmente.")
            return

        texto = "üë®‚Äçüíº *LISTA DE VENDEDORES ACTIVOS:*\n\n"
        for seller_id in lista_sellers:
            try:
                user_info = bot.get_chat(int(seller_id))
                nombre = user_info.first_name or "Sin nombre"
                if hasattr(user_info, 'last_name') and user_info.last_name:
                    nombre += f" {user_info.last_name}"
                enlace = f"[{nombre}](tg://user?id={seller_id})"
                texto += f"üîπ {enlace}\n"
            except Exception:
                texto += f"üîπ ID: `{seller_id}` (no se pudo obtener el nombre)\n"

        bot.send_message(message.chat.id, texto, parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {str(e)}")

@bot.message_handler(commands=['seller'])
def cmd_seller(message):
    ADMIN_ID = 7819787342  # Reemplaza por tu ID de Telegram, sin comillas

    # Verifica si el usuario es el administrador
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå No tienes permiso para usar este comando.")
        return

    try:
        parts = message.text.split()
        
        # Asegurarse de que el comando est√° correctamente escrito
        if len(parts) != 2:
            bot.send_message(message.chat.id, "‚ùó Usa el comando as√≠: /seller <user_id>")
            return

        seller_id = int(parts[1])  # Convierte el ID del vendedor a entero

        # Obtener informaci√≥n del usuario
        try:
            user_info = bot.get_chat(seller_id)
            full_name = user_info.first_name
            if user_info.last_name:
                full_name += f" {user_info.last_name}"
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå Error al obtener informaci√≥n del usuario: {e}")
            return

        # Cargar y actualizar sellers.json
        try:
            with open("sellers.json", "r") as f:
                sellers = json.load(f)
        except FileNotFoundError:
            sellers = {"sellers": []}  # Crear la estructura si el archivo no existe

        # Verificar si el vendedor ya est√° en la lista
        if seller_id not in sellers["sellers"]:
            sellers["sellers"].append(seller_id)
            with open("sellers.json", "w") as f:
                json.dump(sellers, f, indent=4)

            bot.send_message(message.chat.id, f"‚úÖ El usuario *{full_name}* ha sido promovido al rango de *SELLER*.", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è El usuario *{full_name}* ya es un SELLER.", parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")
        
@bot.message_handler(commands=['unseller'])
def cmd_unseller(message):
    ADMIN_ID = 7819787342  # Reemplaza por tu ID de Telegram

    # Verifica si el usuario es el administrador
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå No tienes permiso para usar este comando.")
        return

    try:
        parts = message.text.split()
        
        # Asegurarse de que el comando est√° correctamente escrito
        if len(parts) != 2:
            bot.send_message(message.chat.id, "‚ùó Usa el comando as√≠: /unseller <user_id>")
            return

        seller_id = int(parts[1])  # Convierte el ID a entero

        # Obtener nombre del usuario
        try:
            user_info = bot.get_chat(seller_id)
            full_name = user_info.first_name
            if user_info.last_name:
                full_name += f" {user_info.last_name}"
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå Error al obtener informaci√≥n del usuario: {e}")
            return

        # Cargar y modificar sellers.json
        try:
            with open("sellers.json", "r") as f:
                sellers = json.load(f)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è El archivo de sellers no existe.")
            return

        if seller_id in sellers.get("sellers", []):
            sellers["sellers"].remove(seller_id)

            with open("sellers.json", "w") as f:
                json.dump(sellers, f, indent=4)

            bot.send_message(message.chat.id, f"‚úÖ El usuario *{full_name}* ha sido removido del rango *SELLER*.", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è El usuario *{full_name}* no es un SELLER.", parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")


@bot.message_handler(func=lambda message: True)
def mensaje(message):
    reenviar_mensaje(message)

# Iniciar el bot asegur√°ndose de no tener instancias duplicadas
if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)











